const fs = require('fs');
const path = require('path');
const { SlashCommandBuilder } = require('discord.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('import')
        .setDescription('Import bans into this server')
        .addStringOption(option =>
            option.setName('code')
                .setDescription('Export code string from /export')
                .setRequired(true)
        ),

    async execute(interaction) {
        const serverId = interaction.guild.id;
        const code = interaction.options.getString('code');

        // Decode base64 string
        let importedBans;
        try {
            const decoded = Buffer.from(code, 'base64').toString('utf-8');
            importedBans = JSON.parse(decoded);
            if (!Array.isArray(importedBans)) throw new Error('Invalid format: expected an array');
        } catch (err) {
            return interaction.reply({ content: 'Invalid code format.', ephemeral: true });
        }

        // Path to bans file
        const dirPath = path.join(__dirname, '..', 'data', 'servers', serverId);
        const bansFile = path.join(dirPath, 'bans.json');

        // Ensure folder exists
        if (!fs.existsSync(dirPath)) {
            fs.mkdirSync(dirPath, { recursive: true });
        }

        // Load existing bans or create new
        let existingBans = [];
        if (fs.existsSync(bansFile)) {
            try {
                existingBans = JSON.parse(fs.readFileSync(bansFile, 'utf-8'));
                if (!Array.isArray(existingBans)) existingBans = [];
            } catch {
                existingBans = [];
            }
        }

        // Combine existing bans with imported, avoid duplicates by userid
        const combinedBansMap = new Map();
        for (const ban of existingBans) {
            combinedBansMap.set(ban.userid, ban);
        }
        for (const ban of importedBans) {
            combinedBansMap.set(ban.userid, ban); // override or add
        }

        const combinedBans = Array.from(combinedBansMap.values());

        // Save combined bans
        try {
            fs.writeFileSync(bansFile, JSON.stringify(combinedBans, null, 2));
        } catch (err) {
            return interaction.reply({ content: 'Failed to save bans file.', ephemeral: true });
        }

        return interaction.reply({ content: `Successfully imported ${importedBans.length} bans. Make sure to use /apply to ban the imported users.`, ephemeral: true });
    }
};
